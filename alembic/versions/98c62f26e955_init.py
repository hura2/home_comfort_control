"""init

Revision ID: 98c62f26e955
Revises: 
Create Date: 2024-12-25 13:16:27.175594

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '98c62f26e955'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('aircon_fan_speeds',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('aircon_intensity_scores',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('recode_date', sa.Date(), nullable=False),
    sa.Column('intensity_score', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('recode_date')
    )
    op.create_table('aircon_modes',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('measurements',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('measurement_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_types',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('name', name='uq_sensor_type_name')
    )
    op.create_table('weather_forecast',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('forecast_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('max_temperature', sa.Float(), nullable=False),
    sa.Column('min_temperature', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('aircon_change_intervals',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('mode_id', sa.BigInteger(), nullable=False),
    sa.Column('temperature_min', sa.Float(), nullable=False),
    sa.Column('temperature_max', sa.Float(), nullable=False),
    sa.Column('duration_minutes', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['mode_id'], ['aircon_modes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('mode_id', 'temperature_min', 'temperature_max')
    )
    op.create_table('aircon_settings',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('measurement_id', sa.BigInteger(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('mode_id', sa.BigInteger(), nullable=False),
    sa.Column('fan_speed_id', sa.BigInteger(), nullable=False),
    sa.Column('power', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['fan_speed_id'], ['aircon_fan_speeds.id'], ),
    sa.ForeignKeyConstraint(['measurement_id'], ['measurements.id'], ),
    sa.ForeignKeyConstraint(['mode_id'], ['aircon_modes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('circulator_settings',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('measurement_id', sa.BigInteger(), nullable=False),
    sa.Column('fan_speed', sa.SmallInteger(), nullable=False),
    sa.Column('power', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['measurement_id'], ['measurements.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pmvs',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('measurement_id', sa.BigInteger(), nullable=False),
    sa.Column('pmv', sa.Float(), nullable=False),
    sa.Column('ppd', sa.Float(), nullable=False),
    sa.Column('clo', sa.Float(), nullable=False),
    sa.Column('met', sa.Float(), nullable=False),
    sa.Column('air_speed', sa.Float(), nullable=False),
    sa.Column('relative_air_speed', sa.Float(), nullable=False),
    sa.Column('dynamic_clo', sa.Float(), nullable=False),
    sa.Column('wall_surface_temperature', sa.Float(), nullable=False),
    sa.Column('mean_radiant_temperature', sa.Float(), nullable=False),
    sa.Column('dry_bulb_temperature', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['measurement_id'], ['measurements.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensors',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('sensor_code', sa.Text(), nullable=False),
    sa.Column('label', sa.Text(), nullable=False),
    sa.Column('location', sa.Text(), nullable=False),
    sa.Column('sensor_type_id', sa.BigInteger(), nullable=False),
    sa.Column('category', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['sensor_type_id'], ['sensor_types.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sensor_code'),
    sa.UniqueConstraint('sensor_code', name='uq_sensor_code')
    )
    op.create_table('weather_forecast_hourly',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('weather_forecast_id', sa.BigInteger(), nullable=False),
    sa.Column('forecast_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('pressure', sa.SmallInteger(), nullable=True),
    sa.Column('wind_speed', sa.Float(), nullable=True),
    sa.Column('wind_direction', sa.SmallInteger(), nullable=True),
    sa.Column('precipitation_probability', sa.Float(), nullable=True),
    sa.Column('weather', sa.Text(), nullable=True),
    sa.Column('cloud_percentage', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['weather_forecast_id'], ['weather_forecast.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_readings',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('measurement_id', sa.BigInteger(), nullable=False),
    sa.Column('sensor_id', sa.BigInteger(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('co2_level', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['measurement_id'], ['measurements.id'], ),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sensor_readings')
    op.drop_table('weather_forecast_hourly')
    op.drop_table('sensors')
    op.drop_table('pmvs')
    op.drop_table('circulator_settings')
    op.drop_table('aircon_settings')
    op.drop_table('aircon_change_intervals')
    op.drop_table('weather_forecast')
    op.drop_table('sensor_types')
    op.drop_table('measurements')
    op.drop_table('aircon_modes')
    op.drop_table('aircon_intensity_scores')
    op.drop_table('aircon_fan_speeds')
    # ### end Alembic commands ###
